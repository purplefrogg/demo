{"version":3,"sources":["components/Pages/Login/Login.tsx"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","captcha","onSubmit","createField","Input","required","maxLength100","type","src","alt","Login","useSelector","state","auth","isAuth","dispatch","useDispatch","to","className","formData","email","password","rememberMe","login"],"mappings":"wKA4BMA,EAAiBC,YAAkD,CACrEC,KAAM,SADaD,EAjBjB,SAAC,GAAsC,IAApCE,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACtB,OACI,uBAAMC,SAAUH,EAAhB,UACKI,YAAqC,QAASC,IAAO,CAACC,IAAUC,KAAe,SAC/EH,YAAqC,WAAYC,IAAO,CAACC,IAAUC,KAAe,WAAY,CAAEC,KAAM,aAF3G,cAIKJ,YAAqC,aAAcC,IAAO,GAAI,KAAM,CAAEG,KAAM,aAC5EN,GAAW,qBAAKO,IAAKP,EAASQ,IAAI,KAClCR,GAAWE,YAAqC,UAAWC,IAAO,CAACC,KAAW,MAE9EL,GAAS,8BAAMA,IAChB,8BACI,mDA2CLU,UAhCS,WACpB,IAAMT,EAAUU,aAAY,SAACC,GAA0B,OAAOA,EAAMC,KAAKZ,WACnEa,EAASH,aAAY,SAACC,GAA0B,OAAOA,EAAMC,KAAKC,UAClEC,EAAWC,cAOjB,OAAIF,EACO,cAAC,IAAD,CAAUG,GAAI,aAGrB,gCACI,qBAAKC,UAAU,GAAf,mBACA,cAACtB,EAAD,CAAgBM,SAVP,SAACiB,GAAmC,IAC3CC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,SAAUC,EAAwBH,EAAxBG,WAAYrB,EAAYkB,EAAZlB,QACnCc,EAASQ,YAAMH,EAAOC,EAAUC,EAAYrB,KAQJA,QAASA","file":"static/js/7.7a9bd549.chunk.js","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport { login } from '../../../redux/auth-Reducer';\nimport { AppStateType } from '../../../redux/redux-store';\nimport { maxLength100, required } from '../../../utils/validators/validators';\nimport { createField, GetStringKeys, Input } from '../../common/FormsControls/FormsControls';\n\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\n    = ({ handleSubmit, error, captcha }) => {\n        return (\n            <form onSubmit={handleSubmit} >\n                {createField<LoginFormValuesTypeKeys>(\"email\", Input, [required, maxLength100], \"email\")}\n                {createField<LoginFormValuesTypeKeys>(\"password\", Input, [required, maxLength100], \"password\", { type: \"password\" })}\n            remember me\n                {createField<LoginFormValuesTypeKeys>(\"rememberMe\", Input, [], null, { type: \"checkbox\" })}\n                {captcha && <img src={captcha} alt=\"\" />}\n                {captcha && createField<LoginFormValuesTypeKeys>(\"captcha\", Input, [required], null)}\n\n                {error && <div>{error}</div>}\n                <div>\n                    <button>Login</button>\n                </div>\n            </form>\n        )\n    }\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\n    form: 'login'\n})(LoginForm)\n\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\n\nconst Login: React.FC = () => {\n    const captcha = useSelector((state: AppStateType) => { return state.auth.captcha })\n    const isAuth = useSelector((state: AppStateType) => { return state.auth.isAuth })\n    const dispatch = useDispatch()\n\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        let { email, password, rememberMe, captcha } = formData\n        dispatch(login(email, password, rememberMe, captcha))\n    }\n    if (isAuth) {\n        return <Redirect to={'/Profile'} />\n    }\n    return (\n        <div>\n            <div className=\"\">Login</div>\n            <LoginReduxForm onSubmit={onSubmit} captcha={captcha} />\n\n        </div>\n    )\n}\nexport type LoginFormValuesType = {\n    captcha: string\n    rememberMe: boolean\n    password: string\n    email: string\n}\ntype LoginFormOwnProps = {\n    captcha: string | null\n}\n\n\nexport default Login"],"sourceRoot":""}